plugins {
    id 'net.minecraftforge.gradle' version '6.0.+'
    id 'org.jetbrains.kotlin.jvm' version '1.8.21'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.8.21'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

version = '0.1.0'
group = 'com.mctelemetry'
archivesBaseName = 'mctelemetrycore'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

def commitEnvVariable = System.getenv("COMMIT_SHA_SHORT")

if (commitEnvVariable != null) {
    version = version + "+" + commitEnvVariable
} else {
    version = version + "+local"
}

minecraft {
    mappings channel: 'official', version: '1.18.2'

    runs {
        client {
            workingDirectory project.file('run/client')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'mctelemetrycore'

            mods {
                mctelemetrycore {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'mctelemetrycore'

            mods {
                mctelemetrycore {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run/gametest')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'mctelemetrycore'

            mods {
                mctelemetrycore {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'mctelemetrycore', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources')

            mods {
                mctelemetrycore {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDirs 'src/generated/resources/' }

repositories {
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
        content { includeGroup "thedarkcolour" }
    }
    maven {
        name = "CurseMaven"
        url = "https://cursemaven.com"
        content { includeGroup "curse.maven" }
    }
}

configurations {
    shade
    implementation.extendsFrom(shade)
}

dependencies {
    // Use the latest version of Minecraft Forge
    minecraft 'net.minecraftforge:forge:1.18.2-40.2.9'

    implementation 'thedarkcolour:kotlinforforge:3.12.0'

    /*minecraftLibrary("io.prometheus:prometheus-metrics-core:1.0.0")
    minecraftLibrary("io.prometheus:prometheus-metrics-instrumentation-jvm:1.0.0")
    minecraftLibrary("io.prometheus:prometheus-metrics-exporter-httpserver:1.0.0")
    shade("io.prometheus:prometheus-metrics-core:1.0.0")
    shade("io.prometheus:prometheus-metrics-instrumentation-jvm:1.0.0")
    shade("io.prometheus:prometheus-metrics-exporter-httpserver:1.0.0")*/
    runtimeOnly fg.deobf("curse.maven:jei-${jei_version}")
}

compileKotlin {
    kotlinOptions.jvmTarget = "17"
    kotlinOptions.freeCompilerArgs += "-Xcontext-receivers"
}

jar {
    archiveClassifier = "slim-dev"
    manifest {
        attributes([
                'Specification-Title'     : "mctelemetrycore",
                'Specification-Vendor'    : "MC Telemetry",
                'Specification-Version'   : "1", // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.version,
                'Implementation-Vendor'   : "MC Telemetry",
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
shadowJar {
    archiveClassifier = 'dev'
    configurations = [project.configurations.shade]
    relocate 'io.prometheus', "${project.group}.relocated.io.prometheus"
    finalizedBy 'reobfShadowJar'
}

assemble.dependsOn shadowJar

reobf {
    shadowJar {}
}

def copyReobf = tasks.register('copyReobf', Copy) {
    dependsOn(reobf)
    from(layout.buildDirectory.dir("reobfJar")) {
        include "output.jar"
        rename '.+', "${archivesBaseName}-${project.version}-slim.jar"
    }
    into layout.buildDirectory.dir("modResult")
}
def copyReobfShadow = tasks.register('copyReobfShadow', Copy) {
    dependsOn("reobfShadowJar")
    from(layout.buildDirectory.dir("reobfShadowJar")) {
        include "output.jar"
        rename '.+', "${archivesBaseName}-${project.version}.jar"
    }
    into layout.buildDirectory.dir("modResult")
}

def copyDevLibs = tasks.register('copyDevLibs', Copy) {
    dependsOn(jar, shadowJar)
    from(layout.buildDirectory.dir("libs"))
    into layout.buildDirectory.dir("modResult")
}

assemble.dependsOn copyReobf, copyReobfShadow, copyDevLibs

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
